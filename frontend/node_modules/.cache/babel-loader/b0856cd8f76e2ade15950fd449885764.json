{"ast":null,"code":"var _jsxFileName = \"/Users/lievin/dev/nft-market/frontend/src/store/my-nft-context.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyNftContext = /*#__PURE__*/createContext({\n  myNfts: [],\n  totalMyNfts: 0,\n  addMyNft: myNft => {},\n  removeMyNft: nftSheetId => {},\n  itemIsMyNft: nftSheetId => {}\n});\nexport function MyNftContextProvider(props) {\n  _s();\n\n  const [userMyNfts, setUserMyNfts] = useState([]);\n\n  function addMyNftHandler(myNft) {\n    setUserMyNfts(prevUserMyNfts => {\n      return prevUserMyNfts.concat(myNft);\n    });\n  }\n\n  function removeMyNftHandler(nftSheetId) {\n    setUserMyNfts(prevUserMyNfts => {\n      return prevUserMyNfts.filter(nft => nft.sheetId !== nftSheetId);\n    });\n  }\n\n  function itemIsMyNftHandler(nftSheetId) {\n    console.log(nftSheetId);\n    return userMyNfts.some(nft => nft.sheetId === nftSheetId);\n  }\n\n  const context = {\n    myNfts: userMyNfts,\n    totalMyNfts: userMyNfts.length,\n    addMyNft: addMyNftHandler,\n    removeMyNft: removeMyNftHandler,\n    itemIsMyNft: itemIsMyNftHandler\n  };\n  return /*#__PURE__*/_jsxDEV(MyNftContext.Provider, {\n    value: context,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MyNftContextProvider, \"4jKls/nenp2kOjpjsLtG7qb4Hgo=\");\n\n_c = MyNftContextProvider;\nexport default MyNftContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyNftContextProvider\");","map":{"version":3,"sources":["/Users/lievin/dev/nft-market/frontend/src/store/my-nft-context.js"],"names":["createContext","useState","MyNftContext","myNfts","totalMyNfts","addMyNft","myNft","removeMyNft","nftSheetId","itemIsMyNft","MyNftContextProvider","props","userMyNfts","setUserMyNfts","addMyNftHandler","prevUserMyNfts","concat","removeMyNftHandler","filter","nft","sheetId","itemIsMyNftHandler","console","log","some","context","length","children"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,OAAxC;;AAEA,MAAMC,YAAY,gBAAGF,aAAa,CAAC;AACjCG,EAAAA,MAAM,EAAE,EADyB;AAEjCC,EAAAA,WAAW,EAAE,CAFoB;AAGjCC,EAAAA,QAAQ,EAAGC,KAAD,IAAW,CAAE,CAHU;AAIjCC,EAAAA,WAAW,EAAGC,UAAD,IAAgB,CAAE,CAJE;AAKjCC,EAAAA,WAAW,EAAGD,UAAD,IAAgB,CAAE;AALE,CAAD,CAAlC;AAQA,OAAO,SAASE,oBAAT,CAA8BC,KAA9B,EAAqC;AAAA;;AAC1C,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,EAAD,CAA5C;;AAEA,WAASa,eAAT,CAAyBR,KAAzB,EAAgC;AAC9BO,IAAAA,aAAa,CAAEE,cAAD,IAAoB;AAChC,aAAOA,cAAc,CAACC,MAAf,CAAsBV,KAAtB,CAAP;AACD,KAFY,CAAb;AAGD;;AAED,WAASW,kBAAT,CAA4BT,UAA5B,EAAwC;AACtCK,IAAAA,aAAa,CAAEE,cAAD,IAAoB;AAChC,aAAOA,cAAc,CAACG,MAAf,CAAuBC,GAAD,IAASA,GAAG,CAACC,OAAJ,KAAgBZ,UAA/C,CAAP;AACD,KAFY,CAAb;AAGD;;AAED,WAASa,kBAAT,CAA4Bb,UAA5B,EAAwC;AACtCc,IAAAA,OAAO,CAACC,GAAR,CAAYf,UAAZ;AACA,WAAOI,UAAU,CAACY,IAAX,CAAiBL,GAAD,IAASA,GAAG,CAACC,OAAJ,KAAgBZ,UAAzC,CAAP;AACD;;AAED,QAAMiB,OAAO,GAAG;AACdtB,IAAAA,MAAM,EAAES,UADM;AAEdR,IAAAA,WAAW,EAAEQ,UAAU,CAACc,MAFV;AAGdrB,IAAAA,QAAQ,EAAES,eAHI;AAIdP,IAAAA,WAAW,EAAEU,kBAJC;AAKdR,IAAAA,WAAW,EAAEY;AALC,GAAhB;AAQA,sBACE,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEI,OAA9B;AAAA,cACGd,KAAK,CAACgB;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAjCejB,oB;;KAAAA,oB;AAmChB,eAAeR,YAAf","sourcesContent":["import { createContext, useState } from \"react\";\n\nconst MyNftContext = createContext({\n  myNfts: [],\n  totalMyNfts: 0,\n  addMyNft: (myNft) => {},\n  removeMyNft: (nftSheetId) => {},\n  itemIsMyNft: (nftSheetId) => {},\n});\n\nexport function MyNftContextProvider(props) {\n  const [userMyNfts, setUserMyNfts] = useState([]);\n\n  function addMyNftHandler(myNft) {\n    setUserMyNfts((prevUserMyNfts) => {\n      return prevUserMyNfts.concat(myNft);\n    });\n  }\n\n  function removeMyNftHandler(nftSheetId) {\n    setUserMyNfts((prevUserMyNfts) => {\n      return prevUserMyNfts.filter((nft) => nft.sheetId !== nftSheetId);\n    });\n  }\n\n  function itemIsMyNftHandler(nftSheetId) {\n    console.log(nftSheetId);\n    return userMyNfts.some((nft) => nft.sheetId === nftSheetId);\n  }\n\n  const context = {\n    myNfts: userMyNfts,\n    totalMyNfts: userMyNfts.length,\n    addMyNft: addMyNftHandler,\n    removeMyNft: removeMyNftHandler,\n    itemIsMyNft: itemIsMyNftHandler,\n  };\n\n  return (\n    <MyNftContext.Provider value={context}>\n      {props.children}\n    </MyNftContext.Provider>\n  );\n}\n\nexport default MyNftContext;\n"]},"metadata":{},"sourceType":"module"}